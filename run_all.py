#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Hotel Bot –∏ Mini App –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import os
import sys
import time
import signal
import subprocess
import threading
import logging
from pathlib import Path
from typing import List, Optional

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ logs –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/run_all.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class HotelBotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Hotel Bot –∏ Mini App"""
    
    def __init__(self):
        self.processes: List[subprocess.Popen] = []
        self.running = False
        self.setup_directories()
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = ['logs', 'mini_app', 'recorded_actions', 'sessions']
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
            logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –≥–æ—Ç–æ–≤–∞")
    
    def check_requirements(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [
            'bot.py',
            'mini_app_api.py',
            'run_mini_app.py',
            'mini_app/index.html',
            'mini_app/styles.css',
            'mini_app/script.js'
        ]
        
        missing_files = []
        for file_path in required_files:
            if not os.path.exists(file_path):
                missing_files.append(file_path)
        
        if missing_files:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            import fastapi
            import uvicorn
            import telegram
            logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not os.path.exists('.env'):
            logger.warning("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
            logger.info("BOT_TOKEN=your_bot_token_here")
            logger.info("MINI_APP_URL=https://your-domain.com")
            return False
        
        logger.info("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
    
    def start_mini_app(self) -> Optional[subprocess.Popen]:
        """–ó–∞–ø—É—Å–∫ Mini App API"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Mini App API...")
        
        try:
            # –ó–∞–ø—É—Å–∫ Mini App API
            process = subprocess.Popen(
                [sys.executable, 'run_mini_app.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            time.sleep(3)
            
            if process.poll() is None:
                logger.info("‚úÖ Mini App API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
                return process
            else:
                stdout, stderr = process.communicate()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Mini App API: {stderr}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Mini App API: {e}")
            return None
    
    def start_bot(self) -> Optional[subprocess.Popen]:
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            process = subprocess.Popen(
                [sys.executable, 'run_bot.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            time.sleep(2)
            
            if process.poll() is None:
                logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
                return process
            else:
                stdout, stderr = process.communicate()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {stderr}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return None
    
    def monitor_process(self, process: subprocess.Popen, name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            while self.running and process.poll() is None:
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞
                if process.stdout and process.stdout.readable():
                    line = process.stdout.readline()
                    if line:
                        logger.info(f"[{name}] {line.strip()}")
                
                time.sleep(0.1)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name}: {e}")
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Hotel Bot –∏ Mini App...")
        
        if not self.check_requirements():
            logger.error("‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            return False
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ Mini App API
        mini_app_process = self.start_mini_app()
        if mini_app_process:
            self.processes.append(mini_app_process)
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Mini App
            mini_app_thread = threading.Thread(
                target=self.monitor_process,
                args=(mini_app_process, "Mini App")
            )
            mini_app_thread.daemon = True
            mini_app_thread.start()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Mini App API")
            self.stop_all()
            return False
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        bot_process = self.start_bot()
        if bot_process:
            self.processes.append(bot_process)
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
            bot_thread = threading.Thread(
                target=self.monitor_process,
                args=(bot_process, "Bot")
            )
            bot_thread.daemon = True
            bot_thread.start()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞")
            self.stop_all()
            return False
        
        logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üì± Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8000")
        logger.info("ü§ñ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        return True
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        self.running = False
        
        for process in self.processes:
            if process.poll() is None:
                logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process.pid}")
                process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
                    process.kill()
        
        self.processes.clear()
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(signum, frame):
            logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            self.stop_all()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        try:
            if self.start_all():
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
                while self.running:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    for i, process in enumerate(self.processes):
                        if process.poll() is not None:
                            logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å {i} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                            self.stop_all()
                            return
                    
                    time.sleep(1)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
                return
                
        except KeyboardInterrupt:
            logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_all()

def create_env_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞"""
    env_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hotel Bot
BOT_TOKEN=your_bot_token_here
BNOVO_API_KEY=your_bnovo_api_key_here

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mini App
MINI_APP_URL=https://your-domain.com
SECRET_KEY=your-secret-key-here
MINI_APP_DEBUG=True

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_LEVEL=INFO
"""
    
    if not os.path.exists('.env'):
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
        return False
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè® Hotel Bot - –ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫ Mini App –∏ –±–æ—Ç–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not create_env_template():
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫
    manager = HotelBotManager()
    manager.run()

if __name__ == "__main__":
    main()
