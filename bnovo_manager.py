import requests
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import json

logger = logging.getLogger(__name__)

class BnovoManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bnovo PMS API"""
    
    def __init__(self, api_key: str, base_url: str = "https://api.pms.bnovo.ru"):
        self.api_key = api_key
        self.base_url = base_url
        self.headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json'
        }
    
    def get_bookings(self, date_from: Optional[str] = None, date_to: Optional[str] = None) -> Tuple[bool, List[Dict]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            Tuple[bool, List[Dict]]: (—É—Å–ø–µ—Ö, —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π)
        """
        try:
            # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            if not date_from:
                date_from = datetime.now().replace(day=1).strftime('%Y-%m-%d')
            if not date_to:
                date_to = (datetime.now().replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)
                date_to = date_to.strftime('%Y-%m-%d')
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ date_from —Ä–∞–Ω—å—à–µ date_to
            if date_from >= date_to:
                date_to = (datetime.strptime(date_from, '%Y-%m-%d') + timedelta(days=30)).strftime('%Y-%m-%d')
            
            params = {
                'date_from': date_from,
                'date_to': date_to,
                'limit': 20,   # –ú–∞–∫—Å–∏–º—É–º 20 —Å–æ–≥–ª–∞—Å–Ω–æ API
                'offset': 0    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            }
            
            response = requests.get(
                f"{self.base_url}/api/v1/bookings",
                headers=self.headers,
                params=params
            )
            
            if response.status_code == 200:
                response_data = response.json()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if 'data' in response_data and 'bookings' in response_data['data']:
                    bookings = response_data['data']['bookings']
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
                    return True, bookings
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {response_data}")
                    return False, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API"
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False, f"–û—à–∏–±–∫–∞ API: {response.status_code}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
    
    def get_booking_details(self, booking_id: str) -> Tuple[bool, Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        
        Args:
            booking_id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Tuple[bool, Dict]: (—É—Å–ø–µ—Ö, –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        try:
            response = requests.get(
                f"{self.base_url}/api/v1/bookings/{booking_id}",
                headers=self.headers
            )
            
            if response.status_code == 200:
                booking = response.json()
                return True, booking
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return False, f"–û—à–∏–±–∫–∞ API: {response.status_code}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
    
    def get_new_bookings(self, hours_back: int = 24) -> Tuple[bool, List[Dict]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
        
        Args:
            hours_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            Tuple[bool, List[Dict]]: (—É—Å–ø–µ—Ö, —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π)
        """
        try:
            date_from = (datetime.now() - timedelta(hours=hours_back)).strftime('%Y-%m-%d')
            date_to = datetime.now().strftime('%Y-%m-%d')
            
            return self.get_bookings(date_from, date_to)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def format_booking_message(self, booking: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            booking: –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            customer = booking.get('customer', {})
            guest_name = f"{customer.get('name', '')} {customer.get('surname', '')}".strip()
            if not guest_name:
                guest_name = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
            room_name = booking.get('room_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            dates = booking.get('dates', {})
            check_in = dates.get('arrival', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            check_out = dates.get('departure', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            if check_in != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                try:
                    check_in = check_in.split('+')[0]  # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                    check_in = check_in.replace('T', ' ')
                except:
                    pass
            
            if check_out != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                try:
                    check_out = check_out.split('+')[0]  # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                    check_out = check_out.replace('T', ' ')
                except:
                    pass
            
            amount = booking.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            if amount != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                amount = f"{amount} ‚ÇΩ"
            
            status = booking.get('status', {})
            status_name = status.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if isinstance(status, dict) else str(status)
            
            source = booking.get('source', {})
            platform = source.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if isinstance(source, dict) else str(source)
            
            booking_id = booking.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            booking_number = booking.get('number', '')
            
            message = f"üè® **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id}**\n"
            if booking_number:
                message += f"üìã **–ù–æ–º–µ—Ä:** {booking_number}\n"
            message += f"üë§ **–ì–æ—Å—Ç—å:** {guest_name}\n"
            message += f"üè† **–ö–æ–º–Ω–∞—Ç–∞:** {room_name}\n"
            message += f"üìÖ **–ó–∞–µ–∑–¥:** {check_in}\n"
            message += f"üìÖ **–í—ã–µ–∑–¥:** {check_out}\n"
            message += f"üí∞ **–°—É–º–º–∞:** {amount}\n"
            message += f"üìã **–°—Ç–∞—Ç—É—Å:** {status_name}\n"
            message += f"üåê **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {platform}\n"
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    def get_statistics(self, date_from: Optional[str] = None, date_to: Optional[str] = None) -> Tuple[bool, Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
        
        Args:
            date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            
        Returns:
            Tuple[bool, Dict]: (—É—Å–ø–µ—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        try:
            success, bookings = self.get_bookings(date_from, date_to)
            if not success:
                return False, bookings
            
            if not isinstance(bookings, list):
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_bookings = len(bookings)
            total_revenue = sum(float(booking.get('amount', 0)) for booking in bookings if booking.get('amount'))
            confirmed_bookings = len([b for b in bookings if b.get('status', {}).get('name') == '–ó–∞—Å–µ–ª–µ–Ω'])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            platforms = {}
            for booking in bookings:
                source = booking.get('source', {})
                platform = source.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if isinstance(source, dict) else str(source)
                if platform not in platforms:
                    platforms[platform] = {'count': 0, 'revenue': 0}
                platforms[platform]['count'] += 1
                platforms[platform]['revenue'] += float(booking.get('amount', 0))
            
            stats = {
                'total_bookings': total_bookings,
                'total_revenue': f"{total_revenue:.2f} ‚ÇΩ",
                'confirmed_bookings': confirmed_bookings,
                'platforms': platforms,
                'period': f"{date_from} - {date_to}" if date_from and date_to else "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
            }
            
            return True, stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def format_statistics_message(self, stats: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            stats: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            message = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:** {stats['period']}\n\n"
            message += f"üìà **–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:** {stats['total_bookings']}\n"
            message += f"‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:** {stats['confirmed_bookings']}\n"
            message += f"üí∞ **–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:** {stats['total_revenue']}\n\n"
            
            if stats.get('platforms'):
                message += "üåê **–ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:**\n"
                for platform, data in stats['platforms'].items():
                    message += f"‚Ä¢ {platform}: {data['count']} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, {data['revenue']:.2f} ‚ÇΩ\n"
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    def test_connection(self) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
            day_after_tomorrow = (datetime.now() + timedelta(days=2)).strftime('%Y-%m-%d')
            
            response = requests.get(
                f"{self.base_url}/api/v1/bookings",
                headers=self.headers,
                params={
                    'date_from': tomorrow,
                    'date_to': day_after_tomorrow,
                    'limit': 20,
                    'offset': 0
                }
            )
            
            if response.status_code == 200:
                return True, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bnovo PMS —É—Å–ø–µ—à–Ω–æ"
            elif response.status_code == 401:
                return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"
            else:
                return False, f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
                
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}" 