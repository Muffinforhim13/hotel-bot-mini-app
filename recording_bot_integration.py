import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from action_recorder import RecordingManager
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_REPLAY_DATA = 1002
WAITING_RECORDING_FILENAME = 1003

class RecordingBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.recording_manager = RecordingManager()
        self.user_recordings = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def show_recording_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='recording_list')],
            [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data='recording_replay')],
            [InlineKeyboardButton("üè® –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data='create_advertisement')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üé¨ **–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π**\n\n"
        text += "–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
        text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        text += "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏\n"
        text += "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def show_recordings_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_recordings = self.user_recordings.get(user_id, [])
        
        if not user_recordings:
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data='create_advertisement')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='recording_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìã **–ú–æ–∏ –∑–∞–ø–∏—Å–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        keyboard = []
        for i, recording in enumerate(user_recordings[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            filename = recording['filename']
            platform = recording['platform']
            created_at = recording['created_at'][:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
            
            keyboard.append([
                InlineKeyboardButton(
                    f"üìã {platform.title()} ({created_at})",
                    callback_data=f'recording_view_{filename}'
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data='create_advertisement')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='recording_menu')]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìã **–ú–æ–∏ –∑–∞–ø–∏—Å–∏** ({len(user_recordings)})\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def view_recording(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å"""
        query = update.callback_query
        await query.answer()
        
        filename = query.data.replace('recording_view_', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏
        recorder = self.recording_manager.get_recorder('ostrovok')  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        preview = recorder.preview_recording(filename)
        
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data=f'recording_replay_{filename}')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'recording_delete_{filename}')],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data='recording_list')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            preview,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_replay_flow(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∑–∞–ø–∏—Å—å –≤—ã–±—Ä–∞–Ω–∞
        if 'recording_replay_' in query.data:
            filename = query.data.replace('recording_replay_', '')
            context.user_data['replay_filename'] = filename
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
            return await self.show_recordings_list(update, context)
        
        keyboard = [
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data='replay_enter_data')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='recording_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ñ∂Ô∏è **–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n"
            f"üìÅ –§–∞–π–ª: {filename}\n\n"
            f"–î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ Email –∏ –ø–∞—Ä–æ–ª—å\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return WAITING_REPLAY_DATA
    
    async def enter_replay_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "```\n"
            "email: –≤–∞—à_email@example.com\n"
            "password: –≤–∞—à_–ø–∞—Ä–æ–ª—å\n"
            "hotel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            "hotel_address: –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è\n"
            "hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è\n"
            "city: –ì–æ—Ä–æ–¥\n"
            "phone: –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "website: –°–∞–π—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "contact_name: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ\n"
            "contact_email: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email\n"
            "```\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )
        
        return WAITING_REPLAY_DATA
    
    async def handle_replay_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        text = update.message.text.strip()
        
        if text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
            keyboard = [
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='recording_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        user_data = {}
        lines = text.split('\n')
        
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip().lower()
                value = value.strip()
                user_data[key] = value
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
            )
            return WAITING_REPLAY_DATA
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = context.user_data.get('replay_filename')
        if not filename:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data='replay_stop')],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='recording_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ñ∂Ô∏è **–ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...**\n\n"
            f"üìÅ –§–∞–π–ª: {filename}\n"
            f"üè∑Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {user_data.get('platform', 'unknown')}\n\n"
            "–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
            "–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.create_task(self.run_replay(filename, user_data, update.message.chat_id))
        
        return ConversationHandler.END
    
    async def create_advertisement_flow(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üè® Ostrovok", callback_data='create_ad_ostrovok')],
            [InlineKeyboardButton("üè® Bronevik", callback_data='create_ad_bronevik')],
            [InlineKeyboardButton("üè® 101 Hotels", callback_data='create_ad_101hotels')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='recording_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üè® **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
            "‚Ä¢ –í–æ–π–¥–µ—Ç –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç —Ñ–æ—Ä–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –û–ø—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_platform_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        platform = query.data.replace('create_ad_', '')
        context.user_data['selected_platform'] = platform
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        await query.edit_message_text(
            f"üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ {platform.title()}**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
            "```\n"
            "email: –≤–∞—à_email@example.com\n"
            "password: –≤–∞—à_–ø–∞—Ä–æ–ª—å\n"
            "hotel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            "hotel_address: –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è\n"
            "hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è\n"
            "city: –ì–æ—Ä–æ–¥\n"
            "phone: –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "website: –°–∞–π—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "contact_name: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ\n"
            "contact_email: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email\n"
            "description: –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            "amenities: –£–¥–æ–±—Å—Ç–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
            "```\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )
        
        return WAITING_REPLAY_DATA
    
    async def run_replay(self, filename, user_data, chat_id):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            platform = 'ostrovok'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if 'bronevik' in filename:
                platform = 'bronevik'
            elif '101hotels' in filename:
                platform = '101hotels'
            
            recorder = self.recording_manager.get_recorder(platform)
            success = recorder.load_recording(filename)
            
            if success:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –¥–µ–π—Å—Ç–≤–∏—è
                result = recorder.replay_actions(user_data, delay=1.5)
                
                if result:
                    await self.send_message_to_chat(
                        chat_id,
                        "‚úÖ **–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                        "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ."
                    )
                else:
                    await self.send_message_to_chat(
                        chat_id,
                        "‚ö†Ô∏è **–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏**\n\n"
                        "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ."
                    )
            else:
                await self.send_message_to_chat(
                    chat_id,
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∏."
                )
                
        except Exception as e:
            await self.send_message_to_chat(
                chat_id,
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏**\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )
    
    async def send_message_to_chat(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {text}")
    
    def get_handlers(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º"""
        recording_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.start_replay_flow, pattern='^recording_replay'),
                CallbackQueryHandler(self.create_advertisement_flow, pattern='^create_advertisement$'),
                CallbackQueryHandler(self.handle_platform_selection, pattern='^create_ad_')
            ],
            states={
                WAITING_REPLAY_DATA: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_replay_data),
                    CallbackQueryHandler(self.enter_replay_data, pattern='^replay_enter_data$')
                ]
            },
            fallbacks=[
                CallbackQueryHandler(self.show_recording_menu, pattern='^recording_menu$')
            ],
            per_chat=True
        )
        
        return [
            recording_conv_handler,
            CallbackQueryHandler(self.show_recording_menu, pattern='^recording_menu$'),
            CallbackQueryHandler(self.show_recordings_list, pattern='^recording_list$'),
            CallbackQueryHandler(self.view_recording, pattern='^recording_view_'),
        ]


# –ò–º–ø–æ—Ä—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
from datetime import datetime 