#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Mini App Hotel Bot
"""

import os
from typing import Dict, Any

class MiniAppConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mini App"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.APP_NAME = "Hotel Bot Mini App"
        self.APP_VERSION = "1.0.0"
        self.APP_DESCRIPTION = "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–µ–ª–µ–π"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        self.HOST = os.getenv("MINI_APP_HOST", "0.0.0.0")
        self.PORT = int(os.getenv("MINI_APP_PORT", "8000"))
        self.DEBUG = os.getenv("MINI_APP_DEBUG", "False").lower() == "true"
        
        # URL –¥–ª—è Mini App (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω)
        self.MINI_APP_URL = os.getenv("MINI_APP_URL", "https://your-domain.com")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        self.BOT_TOKEN = os.getenv("BOT_TOKEN")
        self.WEBHOOK_URL = os.getenv("WEBHOOK_URL")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.SECRET_KEY = os.getenv("SECRET_KEY", "your-secret-key-here")
        self.ALLOWED_ORIGINS = [
            "https://your-domain.com",
            "https://telegram.org",
            "https://web.telegram.org"
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///hotel_bot.db")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.CACHE_TTL = int(os.getenv("CACHE_TTL", "3600"))  # 1 —á–∞—Å
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
        self.LOG_FILE = os.getenv("LOG_FILE", "logs/mini_app.log")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        self.PLATFORM_URLS = {
            'ostrovok': 'https://extranet.ostrovok.ru',
            'bronevik': 'https://extranet.bronevik.com',
            '101hotels': 'https://extranet.101hotels.com'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.NOTIFICATION_SETTINGS = {
            'booking_notifications': True,
            'status_notifications': True,
            'error_notifications': True
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.RATE_LIMITS = {
            'requests_per_minute': 60,
            'requests_per_hour': 1000,
            'max_file_size': 10 * 1024 * 1024  # 10MB
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        self.TEMPLATE_SETTINGS = {
            'max_templates_per_user': 50,
            'max_actions_per_template': 1000,
            'template_timeout': 300  # 5 –º–∏–Ω—É—Ç
        }
    
    def get_platform_url(self, platform: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        return self.PLATFORM_URLS.get(platform, "")
    
    def is_platform_supported(self, platform: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        return platform in self.PLATFORM_URLS
    
    def get_supported_platforms(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        return list(self.PLATFORM_URLS.keys())
    
    def validate_config(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.BOT_TOKEN:
            print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        if not self.MINI_APP_URL or self.MINI_APP_URL == "https://your-domain.com":
            print("‚ö†Ô∏è MINI_APP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Mini App")
        
        return True
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'app_name': self.APP_NAME,
            'app_version': self.APP_VERSION,
            'app_description': self.APP_DESCRIPTION,
            'host': self.HOST,
            'port': self.PORT,
            'debug': self.DEBUG,
            'mini_app_url': self.MINI_APP_URL,
            'supported_platforms': self.get_supported_platforms(),
            'notification_settings': self.NOTIFICATION_SETTINGS,
            'rate_limits': self.RATE_LIMITS,
            'template_settings': self.TEMPLATE_SETTINGS
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = MiniAppConfig()

def get_config() -> MiniAppConfig:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return config

def validate_environment():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Mini App...")
    
    if not config.validate_config():
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    print(f"üì± Mini App URL: {config.MINI_APP_URL}")
    print(f"üåê –°–µ—Ä–≤–µ—Ä: {config.HOST}:{config.PORT}")
    print(f"üè® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(config.get_supported_platforms())}")
    
    return True

if __name__ == "__main__":
    validate_environment()
