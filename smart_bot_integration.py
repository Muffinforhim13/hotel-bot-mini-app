import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from action_recorder import RecordingManager
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_UNIVERSAL_DATA = 2000
WAITING_PLATFORM_SELECTION = 2001

class SmartBotIntegration:
    """–£–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    
    def __init__(self):
        self.recording_manager = RecordingManager()
        self.user_data = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.platform_templates = {
            'ostrovok': {
                'name': 'Ostrovok',
                'url': 'https://extranet.ostrovok.ru',
                'description': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π'
            },
            'bronevik': {
                'name': 'Bronevik', 
                'url': 'https://extranet.bronevik.com',
                'description': '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏'
            },
            '101hotels': {
                'name': '101 Hotels',
                'url': 'https://extranet.101hotels.com', 
                'description': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏'
            }
        }
    
    async def show_smart_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö", callback_data='smart_create_all')],
            [InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data='smart_select_platforms')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data='smart_status')],
            [InlineKeyboardButton("üìã –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data='smart_templates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üß† **–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏**\n\n"
        text += "–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n"
        text += "‚Ä¢ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù –†–ê–ó\n"
        text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –í–°–ï–• –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö\n"
        text += "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n"
        text += "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def start_universal_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        await query.edit_message_text(
            "üìù **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º**\n\n"
            "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö:\n\n"
            "```\n"
            "email: –≤–∞—à_email@example.com\n"
            "password: –≤–∞—à_–ø–∞—Ä–æ–ª—å\n"
            "hotel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            "hotel_address: –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è\n"
            "hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è\n"
            "city: –ì–æ—Ä–æ–¥\n"
            "phone: –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "website: –°–∞–π—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "contact_name: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ\n"
            "contact_email: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email\n"
            "description: –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            "amenities: –£–¥–æ–±—Å—Ç–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
            "```\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )
        
        return WAITING_UNIVERSAL_DATA
    
    async def select_platforms_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        query = update.callback_query
        await query.answer()
        
        keyboard = []
        for platform_id, platform_info in self.platform_templates.items():
            keyboard.append([
                InlineKeyboardButton(
                    f"üè® {platform_info['name']}", 
                    callback_data=f'platform_{platform_id}'
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("‚úÖ –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data='platform_all')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='smart_menu')]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return WAITING_PLATFORM_SELECTION
    
    async def handle_platform_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        query = update.callback_query
        await query.answer()
        
        platform = query.data.replace('platform_', '')
        context.user_data['selected_platforms'] = [platform] if platform != 'all' else list(self.platform_templates.keys())
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        platforms_text = ", ".join([self.platform_templates[p]['name'] for p in context.user_data['selected_platforms']])
        
        await query.edit_message_text(
            f"üìù **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {platforms_text}**\n\n"
            "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n"
            "```\n"
            "email: –≤–∞—à_email@example.com\n"
            "password: –≤–∞—à_–ø–∞—Ä–æ–ª—å\n"
            "hotel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            "hotel_address: –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è\n"
            "hotel_type: –¢–∏–ø –æ—Ç–µ–ª—è\n"
            "city: –ì–æ—Ä–æ–¥\n"
            "phone: –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "website: –°–∞–π—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "contact_name: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ\n"
            "contact_email: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email\n"
            "description: –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–µ–ª—è\n"
            "amenities: –£–¥–æ–±—Å—Ç–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
            "```\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode='Markdown'
        )
        
        return WAITING_UNIVERSAL_DATA
    
    async def handle_universal_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        text = update.message.text.strip()
        
        if text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
            keyboard = [
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='smart_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        user_data = {}
        lines = text.split('\n')
        
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                key = key.strip().lower()
                value = value.strip()
                user_data[key] = value
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
            )
            return WAITING_UNIVERSAL_DATA
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        selected_platforms = context.user_data.get('selected_platforms', list(self.platform_templates.keys()))
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await update.message.reply_text(
            f"üöÄ **–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ {len(selected_platforms)} –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö...**\n\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join([self.platform_templates[p]['name'] for p in selected_platforms])}\n\n"
            "–ë—Ä–∞—É–∑–µ—Ä—ã –æ—Ç–∫—Ä–æ—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
            "–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä—ã –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        asyncio.create_task(self.create_advertisements_on_all_platforms(
            selected_platforms, user_data, update.message.chat_id
        ))
        
        return ConversationHandler.END
    
    async def create_advertisements_on_all_platforms(self, platforms, user_data, chat_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"""
        results = {}
        
        for platform in platforms:
            try:
                await self.send_message_to_chat(
                    chat_id,
                    f"üîÑ –°–æ–∑–¥–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ {self.platform_templates[platform]['name']}..."
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                recorder = self.recording_manager.get_recorder(platform)
                
                # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
                available_recordings = recorder.get_available_recordings()
                
                if available_recordings:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                    latest_recording = available_recordings[-1]
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                    success = recorder.load_recording(latest_recording)
                    if success:
                        result = recorder.replay_actions(user_data, delay=1.5)
                        results[platform] = {
                            'success': result,
                            'template': latest_recording
                        }
                        
                        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result else "‚ö†Ô∏è –° –æ—à–∏–±–∫–∞–º–∏"
                        await self.send_message_to_chat(
                            chat_id,
                            f"{status} {self.platform_templates[platform]['name']} - {latest_recording}"
                        )
                    else:
                        results[platform] = {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω'}
                        await self.send_message_to_chat(
                            chat_id,
                            f"‚ùå {self.platform_templates[platform]['name']} - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞"
                        )
                else:
                    results[platform] = {'success': False, 'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤'}
                    await self.send_message_to_chat(
                        chat_id,
                        f"‚ùå {self.platform_templates[platform]['name']} - –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ record_actions.py"
                    )
                    
            except Exception as e:
                results[platform] = {'success': False, 'error': str(e)}
                await self.send_message_to_chat(
                    chat_id,
                    f"‚ùå {self.platform_templates[platform]['name']} - –æ—à–∏–±–∫–∞: {str(e)}"
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await self.send_final_report(chat_id, results)
    
    async def send_final_report(self, chat_id, results):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        success_count = sum(1 for r in results.values() if r.get('success', False))
        total_count = len(results)
        
        report = f"üìä **–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç**\n\n"
        report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}\n\n"
        
        for platform, result in results.items():
            platform_name = self.platform_templates[platform]['name']
            if result.get('success', False):
                report += f"‚úÖ {platform_name}: –£—Å–ø–µ—à–Ω–æ\n"
            else:
                error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                report += f"‚ùå {platform_name}: {error}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data='smart_create_all')],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='smart_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.send_message_to_chat(chat_id, report, reply_markup)
    
    async def show_templates_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        status_text = "üìã **–°—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–æ–≤**\n\n"
        
        for platform_id, platform_info in self.platform_templates.items():
            recorder = self.recording_manager.get_recorder(platform_id)
            recordings = recorder.get_available_recordings()
            
            if recordings:
                status_text += f"‚úÖ {platform_info['name']}: {len(recordings)} —à–∞–±–ª–æ–Ω–æ–≤\n"
                for recording in recordings[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    status_text += f"   ‚Ä¢ {recording}\n"
            else:
                status_text += f"‚ùå {platform_info['name']}: –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤\n"
        
        status_text += "\nüí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `python record_actions.py`"
        
        keyboard = [
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='smart_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def send_message_to_chat(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {text}")
    
    def get_handlers(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º"""
        smart_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.start_universal_creation, pattern='^smart_create_all$'),
                CallbackQueryHandler(self.select_platforms_menu, pattern='^smart_select_platforms$'),
                CallbackQueryHandler(self.handle_platform_selection, pattern='^platform_')
            ],
            states={
                WAITING_UNIVERSAL_DATA: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_universal_data)
                ],
                WAITING_PLATFORM_SELECTION: [
                    CallbackQueryHandler(self.handle_platform_selection, pattern='^platform_')
                ]
            },
            fallbacks=[
                CallbackQueryHandler(self.show_smart_menu, pattern='^smart_menu$')
            ],
            per_chat=True
        )
        
        return [
            smart_conv_handler,
            CallbackQueryHandler(self.show_smart_menu, pattern='^smart_menu$'),
            CallbackQueryHandler(self.show_templates_status, pattern='^smart_templates$'),
        ] 