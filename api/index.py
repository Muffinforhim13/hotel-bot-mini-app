#!/usr/bin/env python3
"""
Vercel serverless function for Hotel Bot
"""

import os
import json
import asyncio
import logging
from telegram import Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üì± Mini App", web_app={'url': 'https://hotel-bot-mini-app.vercel.app'}, callback_data='mini_app')],
        [InlineKeyboardButton("üè® –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data='platforms')],
        [InlineKeyboardButton("üß† –£–º–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", callback_data='smart_menu')],
        [InlineKeyboardButton("üé¨ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data='recording_menu')],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications_settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–µ–ª—è–º–∏! üè®\n\n"
    welcome_text += "üì± **Mini App –¥–æ—Å—Ç—É–ø–µ–Ω!** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π!\n\n"
    welcome_text += "üß† **–£–º–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è** - –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö!\n\n"
    welcome_text += "üé¨ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π** - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö!\n\n"
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'mini_app':
        await query.edit_message_text("üì± Mini App –æ—Ç–∫—Ä—ã—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
    elif query.data == 'platforms':
        await query.edit_message_text("üè® –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n\n‚Ä¢ Ostrovok\n‚Ä¢ Bronevik\n‚Ä¢ 101 Hotels")
    elif query.data == 'smart_menu':
        await query.edit_message_text("üß† –£–º–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö!")
    elif query.data == 'recording_menu':
        await query.edit_message_text("üé¨ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö!")
    elif query.data == 'notifications_settings':
        await query.edit_message_text("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n‚Ä¢ –ù–æ–≤—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n‚Ä¢ –û—à–∏–±–∫–∏")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global app
    
    try:
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            logger.error("BOT_TOKEN not found")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CallbackQueryHandler(button_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        logger.info("Bot started successfully on Vercel")
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")

def handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if app is None:
            asyncio.create_task(start_bot())
        
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': 'Bot is running',
                'status': 'success'
            })
        }
        
    except Exception as e:
        logger.error(f"Error in handler: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': str(e),
                'status': 'error'
            })
        }

# –î–ª—è Vercel
def main(request):
    return handler(request)