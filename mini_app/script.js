// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
    tg.ready();
    tg.expand();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
    document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
    document.body.style.color = tg.themeParams.text_color || '#000000';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initializeApp();
});

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function showMainMenu() {
    hideAllSections();
    document.getElementById('mainMenu').style.display = 'block';
}

function showSmartAutomation() {
    hideAllSections();
    document.getElementById('smartAutomation').style.display = 'block';
}

function showRecordingAutomation() {
    hideAllSections();
    document.getElementById('recordingAutomation').style.display = 'block';
}

function showPlatforms() {
    hideAllSections();
    document.getElementById('platforms').style.display = 'block';
}

function showNotifications() {
    hideAllSections();
    document.getElementById('notifications').style.display = 'block';
}

function showTemplates() {
    hideAllSections();
    document.getElementById('templates').style.display = 'block';
    loadTemplates();
}

function showSettings() {
    hideAllSections();
    document.getElementById('settings').style.display = 'block';
    loadSettings();
}

function hideAllSections() {
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => {
        section.style.display = 'none';
    });
    document.getElementById('mainMenu').style.display = 'none';
}

// –£–º–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
function startSmartAutomation() {
    const formData = collectSmartFormData();
    
    if (!validateSmartForm(formData)) {
        return;
    }
    
    showStatus('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...', '‚è≥');
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendToBot('smart_automation', formData)
        .then(response => {
            hideStatus();
            if (response.success) {
                showNotification('–û–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!', 'success');
                showMainMenu();
            } else {
                showNotification('–û—à–∏–±–∫–∞: ' + response.error, 'error');
            }
        })
        .catch(error => {
            hideStatus();
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, 'error');
        });
}

function collectSmartFormData() {
    return {
        email: document.getElementById('smartEmail').value,
        password: document.getElementById('smartPassword').value,
        hotel_name: document.getElementById('smartHotelName').value,
        hotel_address: document.getElementById('smartHotelAddress').value,
        hotel_type: document.getElementById('smartHotelType').value,
        city: document.getElementById('smartCity').value,
        phone: document.getElementById('smartPhone').value,
        website: document.getElementById('smartWebsite').value,
        contact_name: document.getElementById('smartContactName').value,
        contact_email: document.getElementById('smartContactEmail').value,
        description: document.getElementById('smartDescription').value,
        amenities: document.getElementById('smartAmenities').value,
        platforms: {
            ostrovok: document.getElementById('platformOstrovok').checked,
            bronevik: document.getElementById('platformBronevik').checked,
            '101hotels': document.getElementById('platform101Hotels').checked
        }
    };
}

function validateSmartForm(data) {
    const required = ['email', 'password', 'hotel_name', 'hotel_address', 'hotel_type', 'city', 'phone', 'contact_name', 'contact_email'];
    
    for (const field of required) {
        if (!data[field] || data[field].trim() === '') {
            showNotification(`–ü–æ–ª–µ "${getFieldLabel(field)}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`, 'error');
            return false;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ email
    if (!emailRegex.test(data.contact_email)) {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ email', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    const hasPlatform = Object.values(data.platforms).some(selected => selected);
    if (!hasPlatform) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É', 'error');
        return false;
    }
    
    return true;
}

function getFieldLabel(field) {
    const labels = {
        email: 'Email',
        password: '–ü–∞—Ä–æ–ª—å',
        hotel_name: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è',
        hotel_address: '–ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è',
        hotel_type: '–¢–∏–ø –æ—Ç–µ–ª—è',
        city: '–ì–æ—Ä–æ–¥',
        phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
        contact_name: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ',
        contact_email: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email'
    };
    return labels[field] || field;
}

// –ó–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏–π
function showRecordActions() {
    showNotification('–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'warning');
}

function showPlayActions() {
    showNotification('–§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'warning');
}

// –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
function openPlatform(platform) {
    const platformNames = {
        ostrovok: 'Ostrovok',
        bronevik: 'Bronevik',
        '101hotels': '101 Hotels'
    };
    
    showNotification(`–û—Ç–∫—Ä—ã—Ç–∏–µ ${platformNames[platform]}...`, 'info');
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    sendToBot('open_platform', { platform: platform })
        .then(response => {
            if (response.success) {
                showNotification(`${platformNames[platform]} –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ`, 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'error');
            }
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function saveNotificationSettings() {
    const settings = {
        bookingNotifications: document.getElementById('bookingNotifications').checked,
        statusNotifications: document.getElementById('statusNotifications').checked,
        errorNotifications: document.getElementById('errorNotifications').checked
    };
    
    sendToBot('save_notification_settings', settings)
        .then(response => {
            if (response.success) {
                showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
            }
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        });
}

// –®–∞–±–ª–æ–Ω—ã
function loadTemplates() {
    sendToBot('get_templates', {})
        .then(response => {
            if (response.success) {
                displayTemplates(response.templates);
            } else {
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤', 'error');
            }
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        });
}

function displayTemplates(templates) {
    const container = document.getElementById('templatesList');
    
    if (templates.length === 0) {
        container.innerHTML = '<div class="template-item"><p>–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p></div>';
        return;
    }
    
    container.innerHTML = templates.map(template => `
        <div class="template-item">
            <div class="template-header">
                <div class="template-name">${template.name}</div>
                <div class="template-date">${formatDate(template.created_at)}</div>
            </div>
            <div class="template-info">
                <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${template.platform}</p>
                <p><strong>–î–µ–π—Å—Ç–≤–∏–π:</strong> ${template.actions_count}</p>
            </div>
            <div class="template-actions">
                <button class="template-btn" onclick="playTemplate('${template.id}')">‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏</button>
                <button class="template-btn secondary" onclick="deleteTemplate('${template.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
}

function playTemplate(templateId) {
    showStatus('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...', '‚è≥');
    
    sendToBot('play_template', { template_id: templateId })
        .then(response => {
            hideStatus();
            if (response.success) {
                showNotification('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω', 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ' + response.error, 'error');
            }
        })
        .catch(error => {
            hideStatus();
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        });
}

function deleteTemplate(templateId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?')) {
        sendToBot('delete_template', { template_id: templateId })
            .then(response => {
                if (response.success) {
                    showNotification('–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω', 'success');
                    loadTemplates();
                } else {
                    showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
                }
            })
            .catch(error => {
                showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
            });
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
function loadSettings() {
    sendToBot('get_settings', {})
        .then(response => {
            if (response.success) {
                document.getElementById('bnovoApiKey').value = response.settings.bnovo_api_key || '';
                document.getElementById('debugMode').checked = response.settings.debug_mode || false;
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        });
}

function saveSettings() {
    const settings = {
        bnovo_api_key: document.getElementById('bnovoApiKey').value,
        debug_mode: document.getElementById('debugMode').checked
    };
    
    sendToBot('save_settings', settings)
        .then(response => {
            if (response.success) {
                showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
            }
        })
        .catch(error => {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        });
}

// –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π
function showStatus(text, icon = '‚è≥') {
    document.getElementById('statusText').textContent = text;
    document.getElementById('statusOverlay').style.display = 'flex';
}

function hideStatus() {
    document.getElementById('statusOverlay').style.display = 'none';
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É
function sendToBot(command, data) {
    return new Promise((resolve, reject) => {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        
        setTimeout(() => {
            // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            resolve({
                success: true,
                data: data
            });
        }, 2000);
        
        // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
        /*
        fetch('/api/bot', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                command: command,
                data: data,
                user_id: tg.initDataUnsafe.user?.id
            })
        })
        .then(response => response.json())
        .then(resolve)
        .catch(reject);
        */
    });
}

// –£—Ç–∏–ª–∏—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function initializeApp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('Hotel Bot Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadTemplates();
    loadSettings();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers();
}

function setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationCheckboxes = document.querySelectorAll('#notifications input[type="checkbox"]');
    notificationCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', saveNotificationSettings);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('notification')) {
            e.target.remove();
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
tg.onEvent('backButtonClicked', function() {
    if (document.getElementById('mainMenu').style.display === 'none') {
        showMainMenu();
    } else {
        tg.close();
    }
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
function updateBackButton() {
    if (document.getElementById('mainMenu').style.display === 'none') {
        tg.BackButton.show();
    } else {
        tg.BackButton.hide();
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–∫—Ä–∞–Ω–æ–≤
const originalShowMainMenu = showMainMenu;
showMainMenu = function() {
    originalShowMainMenu();
    updateBackButton();
};

const originalShowSmartAutomation = showSmartAutomation;
showSmartAutomation = function() {
    originalShowSmartAutomation();
    updateBackButton();
};

const originalShowRecordingAutomation = showRecordingAutomation;
showRecordingAutomation = function() {
    originalShowRecordingAutomation();
    updateBackButton();
};

const originalShowPlatforms = showPlatforms;
showPlatforms = function() {
    originalShowPlatforms();
    updateBackButton();
};

const originalShowNotifications = showNotifications;
showNotifications = function() {
    originalShowNotifications();
    updateBackButton();
};

const originalShowTemplates = showTemplates;
showTemplates = function() {
    originalShowTemplates();
    updateBackButton();
};

const originalShowSettings = showSettings;
showSettings = function() {
    originalShowSettings();
    updateBackButton();
};
