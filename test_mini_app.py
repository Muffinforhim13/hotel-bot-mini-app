#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mini App Hotel Bot
"""

import asyncio
import json
import requests
import time
from typing import Dict, Any

class MiniAppTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è Mini App API"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_user_id = "test_user_123"
    
    def test_status(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API...")
        
        try:
            response = self.session.get(f"{self.base_url}/api/status")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_mini_app_page(self) -> bool:
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Mini App"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        try:
            response = self.session.get(f"{self.base_url}/")
            if response.status_code == 200:
                content = response.text
                if "Hotel Bot" in content and "Mini App" in content:
                    print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return True
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_smart_automation(self) -> bool:
        """–¢–µ—Å—Ç —É–º–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
        
        test_data = {
            "email": "test@example.com",
            "password": "test_password",
            "hotel_name": "Test Hotel",
            "hotel_address": "Test Address 123",
            "hotel_type": "hotel",
            "city": "Test City",
            "phone": "+1234567890",
            "contact_name": "Test Contact",
            "contact_email": "contact@example.com",
            "description": "Test hotel description",
            "amenities": "Wi-Fi, Parking, Breakfast",
            "platforms": {
                "ostrovok": True,
                "bronevik": False,
                "101hotels": True
            }
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/smart_automation",
                json=test_data,
                headers={"X-User-ID": self.test_user_id}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    print("‚úÖ –£–º–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {data.get('message')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_platforms(self) -> bool:
        """–¢–µ—Å—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º...")
        
        platforms = ["ostrovok", "bronevik", "101hotels"]
        success_count = 0
        
        for platform in platforms:
            try:
                response = self.session.post(
                    f"{self.base_url}/api/open_platform",
                    json={"platform": platform},
                    headers={"X-User-ID": self.test_user_id}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        print(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ {platform} –¥–æ—Å—Ç—É–ø–Ω–∞")
                        success_count += 1
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform}: {data.get('message')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {platform}: {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {platform}: {e}")
        
        return success_count == len(platforms)
    
    def test_templates(self) -> bool:
        """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
            response = self.session.get(
                f"{self.base_url}/api/templates",
                headers={"X-User-ID": self.test_user_id}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    templates = data.get("templates", [])
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {data.get('message')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_settings(self) -> bool:
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            response = self.session.get(
                f"{self.base_url}/api/settings",
                headers={"X-User-ID": self.test_user_id}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    settings = data.get("settings", {})
                    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {list(settings.keys())}")
                    
                    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    test_settings = {
                        "bnovo_api_key": "test_api_key",
                        "debug_mode": True
                    }
                    
                    save_response = self.session.post(
                        f"{self.base_url}/api/settings",
                        json=test_settings,
                        headers={"X-User-ID": self.test_user_id}
                    )
                    
                    if save_response.status_code == 200:
                        save_data = save_response.json()
                        if save_data.get("success"):
                            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {save_data.get('message')}")
                            return False
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {save_response.status_code}")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {data.get('message')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_notification_settings(self) -> bool:
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        test_settings = {
            "booking_notifications": True,
            "status_notifications": False,
            "error_notifications": True
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/notification_settings",
                json=test_settings,
                headers={"X-User-ID": self.test_user_id}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {data.get('message')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def run_all_tests(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Mini App...")
        print("=" * 50)
        
        tests = {
            "API Status": self.test_status,
            "Mini App Page": self.test_mini_app_page,
            "Smart Automation": self.test_smart_automation,
            "Platforms": self.test_platforms,
            "Templates": self.test_templates,
            "Settings": self.test_settings,
            "Notification Settings": self.test_notification_settings
        }
        
        results = {}
        
        for test_name, test_func in tests.items():
            try:
                results[test_name] = test_func()
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                results[test_name] = False
            
            print("-" * 30)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        return results
    
    def print_summary(self, results: Dict[str, bool]):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 50)
        print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        passed = sum(results.values())
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name}: {status}")
        
        print("-" * 50)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Mini App –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hotel Bot Mini App")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Mini App API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    tester = MiniAppTester()
    
    try:
        response = requests.get("http://localhost:8000/api/status", timeout=5)
        if response.status_code != 200:
            print("‚ùå Mini App API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python run_mini_app.py")
            return
    except requests.exceptions.RequestException:
        print("‚ùå Mini App API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python run_mini_app.py")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = tester.run_all_tests()
    tester.print_summary(results)

if __name__ == "__main__":
    main()
